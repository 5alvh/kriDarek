package com.kriDarek.back.controller;

import com.kriDarek.back.dtos.property.PropertyCreateDTO;
import com.kriDarek.back.dtos.property.PropertyGetDTO;
import com.kriDarek.back.dtos.property.PropertySearchDTO;
import com.kriDarek.back.services.PropertyService;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/property")
public class PropertyController {

    private final PropertyService propertyService;

    public PropertyController(PropertyService propertyService) {
        this.propertyService = propertyService;
    }


    //Note:Finished
    @PostMapping
    public ResponseEntity<PropertyGetDTO> create(@RequestBody PropertyCreateDTO propertyDTO) {
        //Get the id from the principal
        return ResponseEntity.ok(propertyService.createProperty(propertyDTO, 1L));
    }

    //Note:Finished
    @GetMapping("/{id}")
    public ResponseEntity<PropertyGetDTO> getById(@PathVariable Long id) {

        //Instead of 1L, get the id from the principal
        return ResponseEntity.ok(propertyService.getPropertyById(id, 1L));
    }

    @GetMapping("/search")
    public ResponseEntity<Page<PropertyGetDTO>> searchByCriteria(@RequestBody PropertySearchDTO searchDTO, Pageable pageable) {
        //Instead of 1L, get the id from the principal
        return ResponseEntity.ok(propertyService.searchProperties(searchDTO, pageable, 1L));
    }

    //Note:Finished
    @GetMapping("/my-properties")
    public ResponseEntity<List<PropertyGetDTO>> getMyProperties() {
        //Instead of 1L, get the id from the principal
        return ResponseEntity.ok(propertyService.getMyProperties(1L));
    }

    //Note:Finished
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> delete(@PathVariable Long id) {
        //Instead of 1L, get the id from the principal
        propertyService.deleteProperty(id, 1L);
        return ResponseEntity.ok().build();
    }
}
